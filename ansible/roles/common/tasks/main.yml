---
###################
# User Management
###################
- name: Create user {{user}}
  user: name={{user}}
        comment="{{user}} user"
        shell=/bin/bash

- name: Install sudo utility
  apt: name=sudo state=present

- name: Add {{user}} to sudoers
  template: src=sudoers-user.j2
            dest=/etc/sudoers.d/{{user}}-sudoer
            validate='visudo -cf %s'

- name: Add master public key to {{user}} authorized_keys
  authorized_key: user={{user}}
                  key="{{lookup('file', '~/.ssh/id_rsa.pub')}}"

###################
# Unattended Security upgrades
###################

- name: Unattended Security upgrades (debconf)
  debconf: name=unattended-upgrades question=enable_auto_updates value="true" vtype="boolean"

- name: Unattended Security upgrades
  apt: name={{ item }} state=present
  with_items: [ unattended-upgrades, apt-listchanges ]

- name: Mail unattended upgrades errors
  lineinfile: >
    regexp=".*Unattended-Upgrade::Mail \"root\";.*"
    line="Unattended-Upgrade::Mail \"root\";"
    dest=/etc/apt/apt.conf.d/50unattended-upgrades

###################
# Solve sudo alert: self reference host
###################

- name: Self-reference host in /etc/hosts
  lineinfile: >
    line="127.0.1.2 {{ ansible_hostname }}"
    insertafter="^127\.0\.0\.1.*localhost$"
    dest=/etc/hosts

###################
# Configure hosts' MTA to transfert local mails
###################

# By default, exim4 is installed and required minimal configuration
# So that mailing root or other users transfers a message to
# <user>@slash16.local on mail.slash16.local:25

- name: Debconf light MTA exim4
  when: "'mail' not in group_names"
  debconf: >
    name=exim4
    question="{{ item.question }}"
    value="{{ item.svalue }}"
    vtype="{{ item.svtype }}"
  with_items: exim4_simplemta_debconf
  notify: Restart exim4

- name: Ensure a light MTA is installed
  when: "'mail' not in group_names"
  apt: name={{ item }} state=present
  with_items: [ exim4, exim4-base, exim4-daemon-light, exim4-config ]

###################
# Misc. tools
###################
- name: Install usefull system tools
  apt: name="{{item}}" state=present
  with_items:
    - vim
    - htop
    - git

- name: Install vim template
  template: src=vimrc
            dest=/etc/vim/vimrc

###################
# Time management
###################
- name: Set local timezone
  lineinfile: dest=/etc/timezone
              line="{{timezone}}"
  notify: Update tzdata

- name: Install NTP
  apt: name=ntp state=present

- name: Enable the NTP service
  service: name=ntp state=started enabled=true

##################
# Logging
##################
- name: Ensure rsyslog is present
  apt: name=rsyslog state=present

- name: Basic rsyslog configuration
  template: src=rsyslog/rsyslog.conf
            dest=/etc/rsyslog.conf
  notify: Restart rsyslog

- name: Rsyslog remote logging
  template: src=rsyslog/rsyslog.d/15-log-forwarding.conf.j2
            dest=/etc/rsyslog.d/15-log-forwarding.conf
  when: "'adminsys' not in group_names"
  notify: Restart rsyslog

- name: Rsyslog local logging
  template: src={{ item.srcd }}/{{ item.name }}
            dest={{ item.destd }}/{{ item.name }}
  with_items: rsyslog_shared_conftemplates
  notify: Restart rsyslog

- name: Inspect rsyslog.d contents
  shell: find /etc/rsyslog.d -type f | grep -oP '^.*/\K.*$'
  register: rsyslogd_rem_contents
  changed_when: false

# file: state=absent doesn't remove, produces OK or SKIP.
- name: Unmanaged files contained in rsyslog.d
  when: item not in rsyslogd_known_files
  command: rm -f "{{ item }}"
  with_items: rsyslogd_rem_contents.stdout_lines
  notify: Restart rsyslog

##################
# Logging -- Rotation
##################
- name: Ensure logrotate is present
  apt: name=logrotate state=present

- name: Logrotate global rules
  template: src=logrotate/logrotate.conf
            dest=/etc/logrotate.conf

- name: Rules to rotate regular, local rsyslog logs
  when: "'adminsys' not in group_names"
  template: src=logrotate/logrotate.d/rsyslog
            dest=/etc/logrotate.d/rsyslog

##################
# Zabbix monitoring
##################
- name: Install Zabbix agent
  apt: name=zabbix-agent state=present

- name: Add zabbix user to adm group (for syslog display)
  user: name=zabbix groups=adm append=yes
  notify: Restart Zabbix agent
  when: "'gateway' not in group_names"

- name: Setup hostanme in Zabbix agent config
  lineinfile: dest=/etc/zabbix/zabbix_agentd.conf
              line="Hostname=Agent Zabbix - srv{{inventory_hostname.split('.')[-1]}}"
  notify: Restart Zabbix agent

- name: Setup Zabbix agent common config
  lineinfile: dest=/etc/zabbix/zabbix_agentd.conf
              regexp={{item.regexp}}
              line={{item.line}}
  with_items:
    - { regexp: "^EnableRemoteCommands=", line: "EnableRemoteCommands=1" }
    - { regexp: "^Server=", line: "Server=monitor.slash16.local" }
    - { regexp: "^ServerActive=", line: "ServerActive=monitor.slash16.local" }
  notify: Restart Zabbix agent

- name: Enable Zabbix agent service
  service: name=zabbix-agent enabled=true

##################
# Some fixes
##################
- name: Install ethtool utility
  apt: name=ethtool state=present

- name: Disable tx on eth1 DHCP interface
  when: "'gateway' not in group_names"
  command: ethtool -K eth1 tx off
  register: output
  changed_when: output.stdout != ''

- name: Make the change persistent
  when: "'gateway' not in group_names"
  lineinfile: dest=/etc/network/interfaces
              insertafter="^iface eth1 inet dhcp$"
              line="pre-up /sbin/ethtool -K eth1 tx off"

- name: Disable debian specific cron setup that spam rsyslog
  lineinfile: dest=/etc/pam.d/common-session-noninteractive
              insertbefore="^session\\s+required\\s+pam_permit.so$"
              line="session [success=1 default=ignore] pam_succeed_if.so service in cron quiet use_uid"

 
##################
# LDAP 
##################
- name: Copy LDAP client config
  copy: src={{item.src}} dest={{item.dest}}
  with_items:
   - { src: ldap.conf, dest: /etc/ldap/ldap.conf }
 
##################
# SSL
##################
- name: Copy SSL certs and keys
  copy: src={{item.src}} dest={{item.dest}}
  with_items:
    - { src: ssl/ca_cert.key, dest: /etc/ssl/private/ca_cert.key }
    - { src: ssl/ca_cert.pem, dest: /etc/ssl/certs/ca_cert.pem }
    - { src: ssl/cert.key, dest: /etc/ssl/private/cert.key }
    - { src: ssl/cert.pem, dest: /etc/ssl/certs/cert.pem }
...
