---

- name: Check if slapd is installed
  shell: dpkg --get-selections | egrep '^slapd[[:space:]]+' | awk '{ print $2 }' || true
  register: slapd_installed
  changed_when: slapd_installed.stdout != 'install'

# Configure slapd pkg
- name: Configure slapd Package
  when: slapd_installed.stdout != 'install'
  debconf: name=slapd question={{item.question}} value={{item.value}} vtype={{item.vtype}}
  with_items:
    - { question: 'slapd/password1', value: "{{ldap_passwd}}", vtype: 'password' }
    - { question: 'slapd/internal/generated_adminpw', value: '{{ldap_passwd}}', vtype: 'password' }
    - { question: 'slapd/password2', value: '{{ldap_passwd}}', vtype: 'password' }
    - { question: 'slapd/internal/adminpw', value: '{{ldap_passwd}}', vtype: 'password' }
    - { question: 'slapd/domain', value: 'slash16.local', vtype: 'string' }
    - { question: 'slapd/no_configuration', value: 'false', vtype: 'boolean' }
    - { question: 'slapd/move_old_database', value: 'false', vtype: 'boolean' }
    - { question: 'slapd/allow_ldap_v2', value: 'false', vtype: 'boolean' }
    - { question: 'slapd/backend', value: 'MDB', vtype: 'string' }
    - { question: 'slapd/purge_database', value: 'true', vtype: 'boolean' }

- name: Install Packages
  apt: name={{item}} state=present
  with_items: [ slapd, ldap-utils, ssl-cert, gnutls-bin ]
  notify: Enable and start slapd

- name: Copy helper scripts
  copy: src={{item.srcd}}{{item.name}} dest=/tmp/{{item.name}} owner=root group=root mode=0700
  with_items: helper_scripts


# Configure ldap ssl, network/IPC binding
# Workaround to no SIMPLE/anon bind: edit SLAPD_SERVICES
- name: Copy slapd Configuration file
  copy: src=slapd dest=/etc/default/slapd
  notify: Restart slapd

- name: Check config-admin password existence
  shell: grep olcRootPW '/etc/ldap/slapd.d/cn=config/olcDatabase={0}config.ldif' || true
  register: has_admin_pass
  changed_when: has_admin_pass.stdout == ''

- name: Put confadmin.ldif
  when: has_admin_pass.stdout == ''
  copy: src=ldap/members/confadmin_stub.ldif dest=/tmp/confadmin.ldif owner=root group=root mode=0600

- name: Hash & salt admin password
  when: has_admin_pass.stdout == ''
  shell: slappasswd -s {{ ldap_passwd }}
  register: slappasswd_result

- name: Append hashed pass
  when: has_admin_pass.stdout == ''
  shell: /bin/echo -e 'olcRootPW\x3A {{ slappasswd_result.stdout }}' >> /tmp/confadmin.ldif

- name: Set hashed olcRootPW
  command: ldapmodify -Y EXTERNAL -H ldapi:/// -D cn=admin,dc=slash16,dc=local  -f /tmp/confadmin.ldif
  when: has_admin_pass.stdout == ''


- name: Set stats log level
  args:
    executable: /bin/bash
  shell: ldapmodify -Y EXTERNAL -H ldapi:/// -D 'cn=admin,dc=slash16,dc=local' -f /dev/stdin <<< "{{ item }}"
  with_items:
    - |
        dn: cn=config
        changetype: modify
        replace: olcLogLevel
        olcLogLevel: stats

#Idealement: check si c'est necessaire avant ;
# Merge les etapes si raisonnablement possible
# cf. :'changed_when: output.{stdout,...} == ...'

#- name: Check openldap access to the cert key
#  shell: groups openldap | grep -q ssl-cert \
#    && find /etc/ssl/private/cert.key -group ssl-cert

- name: Copy ldap certificate and key
  copy: src={{item.src}} dest={{item.dest}}
  with_items:
    - { src: ssl/ldap.pem, dest: /etc/ssl/certs/ldap.pem }
    - { src: ssl/ldap.key, dest: /etc/ssl/private/ldap.key }

- name: Check ldap certificates
  shell: ldapsearch -Y EXTERNAL -LLL -H ldapi:/// -b cn=config '{{item.attr}}=*' {{item.attr}} 2> /dev/stdout | grep '{{item.attr}}' | grep '{{item.val}}'
  register: certs_check
  changed_when:
    - certs_check.rc != 0
  failed_when:
    - certs_check.rc != 0
    - certs_check.rc != 1
  with_items:
    - { id: 0, attr: olcTLSCACertificateFile, val: /etc/ssl/certs/ca_cert.pem }
    - { id: 1, attr: olcTLSCertificateFile, val: /etc/ssl/certs/ldap.pem }
    - { id: 2, attr: olcTLSCertificateKeyFile, val: /etc/ssl/private/ldap.key }

- name: Configure ldap to use certificates [0]
  copy: src=ldap/certs.ldif dest=/tmp/certs.ldif owner=openldap group=openldap
  when: "certs_check.results[0].rc == 1 or certs_check.results[1].rc == 1 or certs_check.results[2].rc == 1"

- name: Configure ldap to use certificates [1] 
  command: ldapmodify -Y EXTERNAL -H ldapi:/// -f /tmp/certs.ldif
  when: "certs_check.results[0].rc == 1 or certs_check.results[1].rc == 1 or certs_check.results[2].rc == 1"

- name: Check ACLs
  command: /tmp/ldap_check_ACLs.sh
  register: acl_diff
  changed_when: acl_diff.stdout != ''

- name: Setting services ACL (LDIF copy)
  when: acl_diff.stdout != ''
  copy: src={{item.src}} dest={{item.dest}} owner=root group=root mode=0600
  with_items:
    - { src: ldap/access/olcAccess.ldif, dest: /tmp/olcAccess.ldif }

- name: Setting services ACL (modify)
  when: acl_diff.stdout != ''
  command: ldapmodify -Y EXTERNAL -H ldapi:/// -f /tmp/olcAccess.ldif
  with_items:
    - { src: ldap/access/olcAccess.ldif, dest: /tmp/olcAccess.ldif }

# Configure ldap groups
# TODO: si on considere que des services genre postfix doivent se bind, les ajouter.
- name: Check ldap groups
  shell: ldapcompare -Y EXTERNAL -H ldapi:/// ou={{item.ou}},dc=slash16,dc=local ou:{{item.ou}} | grep 'TRUE\|FALSE\|UNDEFINED'
  register: groups_check
  changed_when: groups_check.stdout != 'TRUE'
  failed_when:
    - groups_check.stdout != 'TRUE'
    - groups_check.stdout != 'FALSE'
    - groups_check.stdout != 'UNDEFINED'
  with_items:
    - { id: 0, ou: people }
    - { id: 1, ou: services }

- name: Configure ldap groups [0]
  copy: src={{item.src}} dest={{item.dest}} owner=openldap group=openldap
  when: groups_check.results[{{item.id}}].stdout != 'TRUE'
  with_items:
    - { id: 0, src: ldap/groups/people.ldif, dest: /tmp/people.ldif }
    - { id: 1, src: ldap/groups/services.ldif, dest: /tmp/services.ldif }

- name: Configure ldap groups [1]
  command: ldapadd -H ldap://ldap.slash16.local/ -x -D cn=admin,dc=slash16,dc=local -w {{ldap_passwd}} -f {{item.src}}
  when: groups_check.results[{{item.id}}].stdout != 'TRUE'
  with_items:
    - { id: 0, src: /tmp/people.ldif }
    - { id: 1, src: /tmp/services.ldif }

# Configure ldap members
- name: Configure ldap members and services (copy ldifs)
  copy: src={{item.srcd}}{{item.file}} dest={{item.destd}}{{item.file}} owner=root group=root mode=0600
  with_items: ldap_users

- name: Configure ldap members and services (add)
  shell: "ROOTPW={{ldap_passwd}} /tmp/ldapadd_with_ssha.sh {{item.destd}}{{item.file}} {{item.user}} {{item.ou}}"
  register: added_user
  changed_when: added_user.stdout != 'exists'
  with_items: ldap_users

