---
- name: Install necessary packages
  apt: name="{{item}}" state=present
  with_items:
    - clang
    - postgresql
    - git
    - python-psycopg2
    - python-apt


# Gogs user
###########
- name: create git group
  group: name=git state=present

- name: create git user
  user: name=git group=git shell=/bin/bash

#- name: git user authorized_keys (ansible)
#  authorized_key: user=git key="{{lookup('file', '/home/ansible/.ssh/id_rsa.pub')}}"


# Go compiler Installation
##########################
- name: Test if golang is installed
  stat: path=/home/git/go-linux-ppc64le-bootstrap/bin/go
  register: go_try
   
- name: copy go files
  unarchive: src=go-linux-ppc64le-bootstrap.tbz dest=/home/git owner=git group=git
  when: go_try.stat.exists == False

- name: Golang rights
  file: >
    path=/home/git/go-linux-ppc64le-bootstrap
    recurse=yes
    state=directory
    group=git
    owner=git

- name: Go env variables in bashrc, GOROOT
  lineinfile: dest=/home/git/.bashrc line="export GOROOT=$HOME/go-linux-ppc64le-bootstrap"
 
- name: Go env variables in bashrc, PATH update
  lineinfile: dest=/home/git/.bashrc line="export PATH=$PATH:$GOROOT/bin"

- name: Go env variables in bashrc, GOPATH
  lineinfile: dest=/home/git/.bashrc line="export GOPATH=$HOME/goworkspace"


# Nginx installation
####################
#- name: Add backports repo
#  apt_repository: >
#    repo='deb http://ftp.debian.org/debian jessie-backports main'
#    state=present
#
#- name: Install backports nginx
#  apt: name=nginx state=present default-release=jessie-backports
#
#- name: nginx pid's file race fix, systemd folder
#  file: >
#    path=/etc/systemd/system/nginx.service.d
#    state=directory
#    recurse=yes
#
#- name: nginx pid's file race fix, override.conf
#  copy: src=override.conf dest=/etc/systemd/system/nginx.service.d/override.conf
#  notify:
#    - reload systemd
#    - restart nginx
#
#- name: nginx conf file
#  copy: src=nginx.conf dest=/etc/nginx/nginx.conf
#  notify:
#    - restart nginx

- name: nginx site conf
  copy: src=default dest=/etc/nginx/sites-available/default
  notify:
    - restart nginx

- name: enable nginx site conf
  file: >
    dest=/etc/nginx/sites-enabled/default
    src=/etc/nginx/sites-available/default
    state=link

# Go Git Service
################
- name: Test if gogs is installed
  stat: path=/home/git/goworkspace/src/github.com/gogits/gogs/gogs
  register: gogs_try

- name: install Go Git Service (gogs)
  script: install_gogs.sh
  register: gogs_result
  when: gogs_try.stat.exists == False
 
- name: Gogs conf folder
  file: >
    path=/home/git/goworkspace/src/github.com/gogits/gogs/custom/conf
    state=directory
    recurse=yes
    group=git
    owner=git

- name: gogs conf file
  template: >
    src=app.ini.j2
    dest=/home/git/goworkspace/src/github.com/gogits/gogs/custom/conf/app.ini
    owner=git
    group=git
  notify:
    - restart gogs

- name: Gogs rights
  file: >
    path=/home/git/goworkspace
    recurse=yes
    group=git
    owner=git

- name: Gogs service (systemd)
  copy: src=gogs.service dest=/etc/systemd/system/gogs.service
  notify:
    - reload systemd

# PostgreSQL
############

- name: Database is created
  sudo: yes
  sudo_user: postgres
  postgresql_db: >
    name={{ gogs_db_name }}

- name: User has access to the database
  sudo: yes
  sudo_user: postgres
  postgresql_user: >
    db={{ gogs_db_name }}
    name={{ gogs_db_user }}
    password={{ gogs_db_password }}
    priv=ALL

- name: User does not have unnecessary privilege
  sudo: yes
  sudo_user: postgres
  postgresql_user: >
    name={{ gogs_db_user }}
    role_attr_flags=NOSUPERUSER,NOCREATEDB

# GoGS backup #
###############

- name: GoGS dump cronjob dirtree
  with_items: gogs_dump_dirtree
  file: state=directory owner=git group=git path={{ item }}

- name: GoGS dump cronjob files
  with_items: gogs_dump_cronjob_files
  copy: >
    src={{ item.src }}
    dest={{ item.dest }}
    owner=git
    group=git
    mode={{ item.mode }}

# //!\\ Cron module's behaviour is borken when iterating on items.
- name: GoGs dump cronjob
  cron: >
    user=git
    hour=2
    minute=30
    job=/home/git/.local/bin/gogs_dump.sh
    state=present
    name="GoGS daily dump"

- name: GoGs dump logrotate cronjob
  cron: >
    user=git
    hour=5
    minute=0
    job=/home/git/.local/bin/logrotate_user_wrapper.sh
    state=present
    name="GoGS daily dump rotation"

# Everything's right ?
###################### 
- name: nginx is started
  service: name=nginx state=started enabled=true

- name: gogs is started
  service: name=gogs state=started enabled=true

- name: postgresql is started
  service: name=postgresql state=started enabled=true
...
